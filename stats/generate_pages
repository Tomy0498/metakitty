#!/usr/bin/env ruby

require 'json'
require 'erb'
require 'octokit'
load 'stats.rb'

puts "Loading stats..."
if !ENV.has_key?('GITHUB_OAUTH_TOKEN')
  puts "An authentication method environment variable must be set"
  puts "Please set GITHUB_OAUTH_TOKEN"
exit 1
end

projects = [
  'rapid7/metasploit-framework',
  'rapid7/metasploit-payloads',
  'rapid7/meterpreter',
  'rapid7/metasploit-javapayload',
  'rapid7/metasploit-omnibus',
  'metasploit/resource-portal-data',
  'rapid7/metasploit_data_models',
  'rapid7/rex-encoder',
  'rapid7/rex-rop_builder',
  'rapid7/rex-mime',
  'rapid7/rex-nop',
  'rapid7/rex-text',
  'rapid7/rex-powershell',
  'rapid7/rex-sslscan',
  'rapid7/rex-socket',
  'rapid7/rex-core',
  'rapid7/rex-bin_tools',
  'rapid7/rex-ole',
  'rapid7/rex-arch',
  'rapid7/rex-struct2',
  'rapid7/rex-registry',
  'rapid7/rex-java',
  'rapid7/rex-zip',
  'rapid7/rex-random_identifier',
  'rapid7/rex',
  'rapid7/mettle',
  ]
stats = IssueStats.new(ENV['GITHUB_OAUTH_TOKEN'], projects)

steady_state_charts = [
  { page: 'pull_requests',
    title: "Open Pull Requests",
    labels: [],
    pull_requests: true },
  { page: 'features_and_enhancements',
    title: "Open Features and Enhancements",
    labels: ["feature", "enhancement"],
    pull_requests: false },
  { page: 'bugs',
    title: "Open Bugs",
    labels: ["bug"],
    pull_requests: false }
  ]

change_charts = [
  { page: 'pull_request_rates',
    title: 'Pull Requests per Quarter',
    labels: [],
    pull_requests: true },
  { page: 'bug_rates',
    title: 'Bugs per Quarter',
    labels: ["bug"],
    pull_requests: false },
  { page: 'feature_and_enhancement_rates',
    title: 'Features and Enhancements per Quarter',
    labels: ["feature", "enhancement"],
    pull_requests: false },
  ]

today = DateTime.now
last_week = today - 7
last_month = today - 30

puts "Making some (sausage) links..."
toc = ''
accordion = '
            '
change_charts.each do |chart|
  toc << "
  <li role=\"presentation\">
    <a href=\"#{chart[:page]}.html\" >#{chart[:title]}</a>
  </li>"
end

steady_state_charts.each do |chart|
  items = stats.new_things_between(last_week, today,
    chart[:pull_requests], chart[:labels])

  toc << "
  <li role=\"presentation\">
    <a href=\"#{chart[:page]}.html\" >#{chart[:title]}
      <span class=\"badge\">#{items.length} since last week</span>
    </a>
  </li>"

  accordion << "
    <div class=\"panel panel-primary\">
      <div class=\"panel-heading\" data-toggle=\"collapse\"
           data-parent=\"#accordion\" data-target=\"\##{chart[:page]}\">
        <h4 class=\"panel-title\">New #{chart[:title]}</h4>
      </div>
      <div id=\"#{chart[:page]}\" class=\"panel-collapse collapse\">
      <div class=\"panel-body\">
        Check out some of the new #{chart[:title]} for this week!
      </div>
      <div class=\"table-responsive\">
      <table class=\"table\">
    "

  items.each do |item|
    url = "https://github.com/#{item[:project]}/issues/#{item[:number]}"
    accordion << "
          <tr>
            <td class=\"resource_url\">
              <a target=\"_blank\" href=\"#{url}\">
                <span class=\"fa-fw fa fa-github\">#{item[:title]}</span>
              </a>
              <a title=\"#{item[:title]}\" href=\"#{url}\">#{item[:title]}
                <span class=\"fa-fw fa fa-info-circle\"></span>
              </a>
            </td>

            <td class=\"resource_date\" nowrap>
              <em>#{item[:created_at]}</em>
            </td>

            <td class=\"resource_author\" nowrap>
              #{item[:reporter]}
            </td>
          </tr>"
  end

  accordion << '</table></div></div></div>'
end
accordion << '</div>'

top_committers = stats.top_committers(last_month)
top_committers_1  = ''
top_committers_2  = ''
top_committers_3  = ''

top_committers.to_a[0..9].each do |committer, count|
  top_committers_1 << "<td>#{committer} (#{count})</td>"
end

top_committers.to_a[10..19].each do |committer, count|
  top_committers_2 << "<td>#{committer} (#{count})</td>"
end

top_committers.to_a[20..29].each do |committer, count|
  top_committers_3 << "<td>#{committer} (#{count})</td>"
end

puts "And a cherry on top for good measure!"

title = ''
stat_data = []
stat_r7_data = []
open_stat_data = []
close_stat_data = []
open_r7_stat_data = []
close_r7_stat_data = []

steady_state_charts.each do |chart|
  title = chart[:title]
  stat_data = []
  stat_r7_data = []
  first_stat = false
  (DateTime.new(2011, 1, 1)..DateTime.now).each do |date|
    issues = stats.open_things_on(date, chart[:pull_requests], chart[:labels])
    if first_stat || issues.length > 0
      stat_data << [date.to_time.to_i * 1000, issues.length]
      first_stat = true
    end

    issues = stats.open_things_on(date, chart[:pull_requests], chart[:labels], '-r7')
    if first_stat || issues.length > 0
      stat_r7_data << [date.to_time.to_i * 1000, issues.length]
      first_stat = true
    end
  end
  template = ERB.new(File.read('template.erb'))
  File.write("#{chart[:page]}.html", template.result)
end

def quarter_dates(date = DateTime.today)
  start_month = date.month - (date.month - 1) % 3
  start_date  = DateTime.new(date.year, start_month, 1)

  { :begin_date => start_date, :end_date   => (start_date >> 3) - 1 }
end

change_charts.each do |chart|
  title = chart[:title]
  open_stat_data = []
  close_stat_data = []
  open_r7_stat_data = []
  close_r7_stat_data = []

  first_stat = false
  ((DateTime.now - (365 * 4))..DateTime.now).step(90) do |date|

		quarter = quarter_dates(date)

    issues = stats.new_things_between(quarter[:begin_date], quarter[:end_date],
      chart[:pull_requests], chart[:labels])
    if first_stat || issues.length > 0
      open_stat_data << [quarter[:end_date].to_time.to_i * 1000, issues.length]
      first_stat = true
    end

    issues = stats.new_things_between(quarter[:begin_date], quarter[:end_date],
      chart[:pull_requests], chart[:labels], '-r7')
    if first_stat || issues.length > 0
      open_r7_stat_data << [quarter[:end_date].to_time.to_i * 1000, issues.length]
      first_stat = true
    end

    issues = stats.closed_things_between(quarter[:begin_date], quarter[:end_date],
      chart[:pull_requests], chart[:labels])
    if first_stat || issues.length > 0
      close_stat_data << [quarter[:end_date].to_time.to_i * 1000, issues.length]
      first_stat = true
    end

    issues = stats.closed_things_between(quarter[:begin_date], quarter[:end_date],
      chart[:pull_requests], chart[:labels], '-r7')
    if first_stat || issues.length > 0
      close_r7_stat_data << [date.to_time.to_i * 1000, issues.length]
      first_stat = true
    end
  end
  template = ERB.new(File.read('template_change.erb'))
  File.write("#{chart[:page]}.html", template.result)
end

puts "All done!"
